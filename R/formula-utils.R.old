# Shared file
#

# .parse_formulae(iris, ~ Species + Petal.Width + Missing, a ~ b+Sepal.Width)
# .parse_formulae(iris, Species ~ Petal.Width + Missing, a ~ b+Sepal.Width, side="lhs")
# .parse_formulae(iris, list(Species ~ Petal.Width + Missing, a ~ b+Sepal.Width), side="rhs")
# .parse_formulae(iris, c(Species ~ Petal.Width + Missing, a ~ b+Sepal.Width), side="rhs")
# .parse_formulae(iris, Species ~ .) # everything except species
.parse_formulae = function(df, ..., side="rhs") {
  list_form = unlist(rlang::list2(...)) #unlist required to support list input
  lapply(list_form, function(form) {

    if (side == "lhs") {
      vars = rlang::f_lhs(form) %>% all.vars()
    } else if (side == "rhs") {
      vars = rlang::f_rhs(form) %>% all.vars()
      if (all(vars == c("."))) vars = setdiff(colnames(df),all.vars(rlang::f_lhs(form)))
    } else {
      vars = form %>% all.vars()
    }

    wronguns = setdiff(vars, colnames(df))
    if (length(wronguns) > 0) warning("Removing variables in formula but not in dataframe: `", wronguns %>% paste0(collapse = " + "), "`; formula was: `", rlang::as_label(form), "`")
    vars = intersect(vars, colnames(df))
    vars = vars %>% sapply(as.symbol, USE.NAMES = FALSE)
    return(vars)
  })
}

# .parse_tidyselect(iris,tidyselect::everything())
.parse_tidyselect = function(df, ...) {
  # zero inputs and formulae should have been dealt with.
  # anything else is a tidyselect error?
  # evaluate as a tidyselect
  expr = rlang::expr(c(...))
  pos = tidyselect::eval_select(expr, data = df)
  cols = colnames(df)[pos]
  cols = cols %>% sapply(as.symbol, USE.NAMES = FALSE)
  return(cols)
}

# works for a single formula or a tidyselect input.
# where dots is either a function (in which case we only want rhs) or a tidyselect.
# .parse_vars(iris, tidyselect::everything())
# .parse_vars(iris, ~ Species + Petal.Width + Missing)
# form =  ~ Species + Petal.Width + Missing
# .parse_vars(iris, form)
.parse_vars = function(df, ...) {

  if (.is_formula_interface(...)) {
    list_vars = .parse_formulae(df, ...)
    if (length(list_vars) == 0) stop("No columns given: please supply a formula or a tidyselect expression e.g. `tidyselect::everything()`")
    if (length(list_vars) > 1) warning("This function only supports single formulae in input. We are only using the first one.")
    return(list_vars[[1]])
  } else {
    return(.parse_tidyselect(df,...))
  }

}

# where dots is either a function (in which case we only want rhs) or a tidyselect.
# .is_formula_interface(~ Species + Petal.Width + Missing)
# .is_formula_interface(~ Species + Petal.Width + Missing, a ~ b+c)
# .is_formula_interface(c(~ Species + Petal.Width + Missing, a ~ b+c))
# .is_formula_interface(list(~ Species + Petal.Width + Missing, a ~ b+c))
# .is_formula_interface(tidyselect::everything())
# .is_formula_interface()
.is_formula_interface = function(...) {
  out = tryCatch({
    tmp = sapply(c(...),rlang::is_formula)
    return(all(tmp))
  }, error = function(e) {
    # could have been a tidyselect.
    FALSE
  })
  return(out)
}
