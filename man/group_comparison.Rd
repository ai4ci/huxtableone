% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/compare_population.R
\name{group_comparison}
\alias{group_comparison}
\title{Extract one or more comparisons for inserting into text.}
\usage{
group_comparison(
  t1_signif,
  variable = NULL,
  subgroup = NULL,
  intervention = NULL,
  percent_fmt = "\%1.1f\%\%",
  p_format = names(.pvalue.defaults),
  no_summary = FALSE,
  summary_glue = NULL,
  summary_arrange = NULL,
  summary_sep = ", ",
  summary_last = " versus ",
  no_signif = FALSE,
  signif_glue = NULL,
  signif_sep = NULL,
  signif_last = NULL
)
}
\arguments{
\item{t1_signif}{a \code{t1_signif} as produced by \code{as_t1_signif()} or
\code{compare_population(..., raw_output = TRUE)}.}

\item{variable}{a variable or set of variables to compare. If missing a
set of approriate values is displayed based on the columns of \code{t1_signif}}

\item{subgroup}{a subgroup or set of subgroups to compare.}

\item{intervention}{the side or sides of the intervention to select. N.b.
using this effectively prevents any statistical comparison as only one side will be
available.}

\item{percent_fmt}{a \code{sprintf} format string that is applied to probability
fields in the summary data to convert to percentages.}

\item{p_format}{the format of the p-values: one of
"sampl", "nejm", "jama", "lancet", "aim" but any value
here is overridden by the \verb{option("huxtableone.pvalue_formatter"=function(...))}}

\item{no_summary}{only extract significance test values}

\item{summary_glue}{a glue specification that maps the summary statistics to
a readable string.}

\item{summary_arrange}{an expression by which to order the summary output}

\item{summary_sep}{a separator to combine the summary output (see \code{glue::glue_collapse()})}

\item{summary_last}{a separator to combine the last 2 summary outputs (see \code{glue::glue_collapse()})}

\item{no_signif}{do not try and include significance in the output. Sometimes
this is the only option if there is not enough of the comparison to retained
by the \code{variable}, \code{subgroup}, and \code{intervention} filters. (Specifically if
there is only a comparison between different subgroups, as the p-values will
be for the different comparison between intervention groups.)}

\item{signif_glue}{a glue specification that maps the combined summary output with
the result of the significance tests, to given a complete comparison.}

\item{signif_sep}{a separator to combine complete comparisons (see \code{glue::glue_collapse()})}

\item{signif_last}{a separator to combine the last 2 complete comparisons (see \code{glue::glue_collapse()})}
}
\value{
ideally a single string but various things will be returned depending
on hos much input is constrained, and sometimes will provide guidance about
what next to do. The intention is the function to be used interactively
until a satisfactory result is obtained.
}
\description{
At some point we need to take information from the tables produced by
\code{huxtableone} and place it into the main text of the document. It is annoying
if this cannot be done automatically. the \code{group_comparison()} function enables
extraction of one or more head to head comparisons and provides a fairly
flexible mechanism for building the precise format desired.
}
\examples{
tmp = diamonds \%>\%
  dplyr::group_by(is_colored) \%>\%
  set_units(price,units="Â£") \%>\%
  compare_population(-color, raw_output=TRUE)

# The tabular output is retrieved by converting to a huxtable
# as_huxtable(tmp, layout="simple")

# An unqualified group_comparison call gives informative messages
# about what can be compared:
tmp \%>\% group_comparison()

# filtering down the data gets us to a specific comparison:
tmp \%>\% group_comparison(variable = "cut", subgroup="Fair") \%>\% dplyr::glimpse()

# With further interactive exploration the
# data available for that comparison can be made into a glue string
tmp \%>\% group_comparison(variable = "cut", subgroup="Fair", intervention = "clear",
  summary_glue = "{is_colored}: {x}/{n} ({prob.0.5}\%)",
  signif_glue = "{variable}={subgroup}; {text}; Overall p-value for '{variable}': {p.value}.")

# group comparisons above using many individual subgroups are a bit confusing because
# the p-value is at the variable level. This is less of an issue for continuous
# or binary values.
tmp \%>\% group_comparison(
  variable = "price",
  summary_glue = "{is_colored}: {unit}{q.0.5}; IQR: {q.0.25} \u2014 {q.0.75} (n={n})",
  signif_glue = "{variable}: {text}; P-value {p.value}.")

# Sometimes we only want to extract a p-value:
tmp \%>\%
  group_comparison(variable = "cut", subgroup="Fair", no_summary=TRUE) \%>\%
  dplyr::glimpse()
}
